diff --git a/node_modules/timidity/index.js b/node_modules/timidity/index.js
index 28b4dd0..87da4cf 100644
--- a/node_modules/timidity/index.js
+++ b/node_modules/timidity/index.js
@@ -1,17 +1,17 @@
 /*! timidity. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
 const Debug = require('debug')
 const EventEmitter = require('events').EventEmitter
-const fs = require('fs')
 const LibTimidity = require('./libtimidity')
 
 const debug = Debug('timidity')
 const debugVerbose = Debug('timidity:verbose')
 
-// Inlined at build time by 'brfs' browserify transform
-const TIMIDITY_CFG = fs.readFileSync(
-  __dirname + '/freepats.cfg', // eslint-disable-line node/no-path-concat
-  'utf8'
-)
+const TIMIDITY_CFG_URL = '/freepats.cfg'
+let TIMIDITY_CFG = ''
+
+fetchConfigFile(TIMIDITY_CFG_URL).then(config => {
+  TIMIDITY_CFG = config
+})
 
 const SAMPLE_RATE = 44100
 const AUDIO_FORMAT = 0x8010 // format of the rendered audio 's16'
@@ -58,16 +58,26 @@ class Timidity extends EventEmitter {
     this._node.addEventListener('audioprocess', this._onAudioProcess)
     this._node.connect(this._audioContext.destination)
 
-    LibTimidity({
-      locateFile: file => new URL(file, this._baseUrl).href
-    }).then((lib) => {
-      this._lib = lib
-      this._onLibReady()
+    this._loadConfig(TIMIDITY_CFG_URL).then(config => {
+      LibTimidity({
+        locateFile: file => new URL(file, this._baseUrl).href
+      }).then((lib) => {
+        this._lib = lib
+        this._onLibReady()
+      })
     })
   }
 
-  _onLibReady () {
-    this._lib.FS.writeFile('/timidity.cfg', TIMIDITY_CFG)
+  async _loadConfig(url) {
+    const response = await fetch(url)
+    if (!response.ok) {
+      throw new Error(`Failed to load config file from ${url}`)
+    }
+    return await response.text()
+  }
+
+  _onLibReady (config) {
+    this._lib.FS.writeFile('/timidity.cfg', config)
 
     const result = this._lib._mid_init('/timidity.cfg')
     if (result !== 0) {
